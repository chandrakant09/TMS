package com.lei.dao.user.orm;

import java.util.ArrayList;
import java.util.List;

import lombok.extern.slf4j.Slf4j;

import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;

import com.lei.dao.base.orm.HibernatePersistenceManager;
import com.lei.dao.user.IUserDao;
import com.lei.domain.roles.RolesDomain;
import com.lei.domain.user.StatusDomain;
import com.lei.domain.user.UserDomain;
import com.lei.domain.wallet.IndividualWalletDomain;
import com.lei.dto.user.UserDTO;
import com.lei.exception.common.ObjectNotSupportedException;
import com.lei.exception.common.ProcessFailedException;
import com.lei.exception.user.RegistrationFailedException;
import com.lei.utility.CommonUtils;

/**
 * 
 * @author Shrikant Kushwaha
 *
 */
@Slf4j
@Repository("userDao")
public class UserDaoImpl implements IUserDao{

	HibernatePersistenceManager hibernatePersistenceManager =null;

	public UserDaoImpl() {
		hibernatePersistenceManager = new HibernatePersistenceManager();
	}


	@Override
	public boolean exists(String emailId) {

		hibernatePersistenceManager.beginTransaction();
		Criteria user = hibernatePersistenceManager.createCriteria(UserDomain.class);
		user.add(Restrictions.eq("email", emailId));
		List<UserDomain> result = user.list();
		if(result != null && result.size()>0){
			return true;
		}
		return false;
	}
	
	@Override
	public boolean existsEDisttId(String edisttId) {

		hibernatePersistenceManager.beginTransaction();
		Criteria user = hibernatePersistenceManager.createCriteria(UserDomain.class);
		user.add(Restrictions.eq("edisttId", edisttId));
		List<UserDomain> result = user.list();
		if(result != null && result.size()>0){
			return true;
		}
		return false;
	}
	

	@Override
	public boolean updatePasswordAndStatus(UserDTO userDTO) throws ProcessFailedException, ObjectNotSupportedException {
		UserDomain userDomain = getUserDomain(userDTO.getEmail());
		userDomain.getStatus().setStatusId(userDTO.getStatus().getStatusId());
		userDomain.getStatus().setPassword(userDTO.getStatus().getPassword());
		return updateUserDomain(userDomain);

	}
	
	public Long getUserID(String emailId)  {
		UserDomain userDomain=getUserDomain(emailId);
		
		if(userDomain!=null){
			return userDomain.getId();
		}else{
			return -1L;
		}
	}
	
	@Override
	public UserDTO getUser(String emailId) throws ObjectNotSupportedException {
		UserDomain userDomain=getUserDomain(emailId);
		
		if(userDomain!=null){
			return CommonUtils.convertObject(userDomain, UserDTO.class);
		}else{
			return null;
		}
	}

	@Override
	public boolean login(UserDTO UserDTO) {
		return false;

	}

	@Override
	public boolean logout(UserDTO userDTO) throws ObjectNotSupportedException {
		
		CommonUtils.convertObject(userDTO, UserDomain.class);
		return false;

	}

	@Override
	public boolean register(UserDTO userDto) throws RegistrationFailedException, ObjectNotSupportedException {
		boolean result= false;
		UserDomain user = CommonUtils.convertObject(userDto, UserDomain.class);
        IndividualWalletDomain individualWalletDomain=new IndividualWalletDomain();
        
		user.getStatus().setUser(user);
		
		try {
			hibernatePersistenceManager.beginTransaction();
			RolesDomain userRole=getUserRole(10002);
			user.setUserRole(userRole);
			hibernatePersistenceManager.save(user);
			individualWalletDomain.setUserId(user.getId());
			hibernatePersistenceManager.save(individualWalletDomain);
			result = true;
			hibernatePersistenceManager.commit();
		} catch (Exception e) {
			log.info(e.getMessage());
			e.printStackTrace();
			hibernatePersistenceManager.rollback();
			throw new RegistrationFailedException("User Registration Failed.");
		}
		return result;

	}


	@Override
	public int getStatusId(String status) {
		StatusDomain userDomain=getStatus(status);
		if(userDomain!=null){
			return userDomain.getId();
		}
		return -1;
	}


	@Override
	public StatusDomain getStatus(String status) {
		StatusDomain userDomain=null;
		hibernatePersistenceManager.beginTransaction();
		Criteria user = hibernatePersistenceManager.createCriteria(StatusDomain.class);
		user.add(Restrictions.eq("name", status));
		List<StatusDomain> result = user.list();
		if(result != null && result.size()>0){
			userDomain = result.get(0);
		}
		return userDomain;
	}
	
	

		
	

	public UserDomain findById(long id) {
		hibernatePersistenceManager.beginTransaction();
		UserDomain user=(UserDomain)hibernatePersistenceManager.getPersistentObject(UserDomain.class, id);
		return user;
		
		//return getByKey(id);
	}

	public UserDomain findBySignInId(String signInId) {
		hibernatePersistenceManager.beginTransaction();
		/*Criteria user = hibernatePersistenceManager.createCriteria(UserDomain.class);
		
		System.out.println(user.list().size());
		UserDomain userDomain = (UserDomain) user.uniqueResult();
*/
		
		
		Long id = getUserID(signInId.trim());
		
		UserDomain userDomain  = (UserDomain) hibernatePersistenceManager.getPersistentObject(UserDomain.class, id);
		//user.add(Restrictions.eq("email", signInId.trim()));
		
		return userDomain;
		
		
		
	}
	
	public UserDomain getUserDomain(String emailId) {
		UserDomain userDomain=null;
		hibernatePersistenceManager.beginTransaction();
		Criteria user = hibernatePersistenceManager.createCriteria(UserDomain.class);
		user.add(Restrictions.eq("email", emailId));
		List<UserDomain> result = user.list();
		if(result != null && result.size()>0){
			userDomain = result.get(0);
		}
		return userDomain;
	}
	
	@Override
	public UserDTO getUserDomainByDisttId(String eDisttId) throws ObjectNotSupportedException {
		UserDomain userDomain=null;
		hibernatePersistenceManager.beginTransaction();
		Criteria user = hibernatePersistenceManager.createCriteria(UserDomain.class);
		user.add(Restrictions.eq("edisttId", eDisttId));
		List<UserDomain> result = user.list();
		if(result != null && result.size()>0){
			userDomain = result.get(0);
			
		}
		if(userDomain==null){
			return null;
		}
		return CommonUtils.convertObject(userDomain, UserDTO.class);
	}
	
	public List<UserDTO> getUsersList() throws ObjectNotSupportedException {
		List<UserDTO> userList=new ArrayList<UserDTO>();
		hibernatePersistenceManager.beginTransaction();
		Criteria user = hibernatePersistenceManager.createCriteria(UserDomain.class);
		List<UserDomain> result = user.list();
		for(UserDomain userDomain:result){
			UserDTO userDto = CommonUtils.convertObject(userDomain, UserDTO.class);
			userList.add(userDto);
		}
		return userList;
	}
	
	public List<RolesDomain> getUserRoles(){
		hibernatePersistenceManager.beginTransaction();
		Criteria user = hibernatePersistenceManager.createCriteria(RolesDomain.class);
		List<RolesDomain> result = user.list();
		return result;
	}
	
	public RolesDomain getUserRole(long roleId) {
		hibernatePersistenceManager.beginTransaction();
		RolesDomain rolesDomain = hibernatePersistenceManager
				.getPersistentObject(RolesDomain.class, roleId);
		return rolesDomain;
	}
	
	public boolean updateUserDomain(UserDomain userDomain) throws ProcessFailedException{
		boolean result = false;
		try {
			hibernatePersistenceManager.beginTransaction();
//			userDomain.setStatus(getStatus(userDomain.getStatus().getId()));
			hibernatePersistenceManager.saveOrUpdate(userDomain);
			result = true;
			hibernatePersistenceManager.commit();
		} catch (Exception e) {
			e.printStackTrace();
			hibernatePersistenceManager.rollback();
			throw new ProcessFailedException("Forget Password Failed.");
		}
		return result;
	}
	
	@Override
	public List getAllUserList() throws ObjectNotSupportedException {
		hibernatePersistenceManager.beginTransaction();
		Query query = hibernatePersistenceManager.createQuery("SELECT user.id,user.firstName,user.lastName,user.email,user.edisttId from UserDomain as user");
		List result = query.list();
		return result;
	}
	
	@Override
	public List getUserDetails(long userId) throws ObjectNotSupportedException {
		hibernatePersistenceManager.beginTransaction();
		Query query = hibernatePersistenceManager.createQuery("SELECT user.id,user.firstName,user.lastName,user.email,user.edisttId from UserDomain as user where user.id="+userId);
		List result = query.list();
		return result;
	}
	
	
	
}
